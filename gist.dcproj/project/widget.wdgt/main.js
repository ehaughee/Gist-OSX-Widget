/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// ===========================
// My custom widget code
// ===========================
//

function auth() {
    if (username.innerText != '' && password.innerText != '') {
        var uname = username.innerText;
        var pword = password.innerText;
    }
    else {
        // TODO: Alert of blank fields
    }
}
 
//
// Function: send()
// Sends the contents of your clipboard to gist.github.com to create
// a gist and then puts the public link to said gist in your clipboard.
//
// event: onClick event from the send button
//
function send() {
    statustext.innerText = "Working...";
    
    var paste = widget.system("/usr/bin/pbpaste", null).outputString;
    var gist = {
      description: "",
      public: true,
      files: {
        "file1.txt": {
          content: paste
        }
      }
    }
    
    gist = JSON.stringify(gist);
    
    // Values you provide
    var URL = "https://api.github.com/gists";	// The feed to fetch
    var onloadHandler = function() { xmlLoaded(xmlRequest); };	// The function to call when the feed is loaded; currently calls the XMLHttpRequest load snippet

    // XMLHttpRequest setup code
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.onload = onloadHandler;
    xmlRequest.open("POST", URL);
    //xmlRequest.setRequestHeader("Authorization", "");
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.send(gist);
}

// Called when an XMLHttpRequest loads a feed; works with the XMLHttpRequest setup snippet
function xmlLoaded(xmlRequest) 
{
	if (xmlRequest.status == 201 || xmlRequest.status == 200) {
		// Parse and interpret results
		// XML results found in xmlRequest.responseXML
		// Text results found in xmlRequest.responseText
        response = JSON.parse(xmlRequest.responseText);
        widget.system("/bin/echo " + response['html_url'] + " | /usr/bin/pbcopy", null);

        statustext.innerText = "Success";
        setTimeout('statustext.innerText \= \"Link in clipboard\"', 2000);
        setTimeout('statustext.innerText \= \"\"', 6000);
	}
	else {
		alert("Error fetching data (" + xmlRequest.status + "): " + JSON.parse(xmlRequest.responseText)["message"]);
        statustext.innerText = "Failed: " + xmlRequest.status;
	}
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
