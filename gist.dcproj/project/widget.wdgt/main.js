var Base64 = {
 
	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
	// public method for encoding
	encode : function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = Base64._utf8_encode(input);
 
		while (i < input.length) {
 
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
 
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
 
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
 
			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
 
		}
 
		return output;
	},

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    }
}

/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// ===========================
// My custom widget code
// ===========================
//

function authorize(event) {
    login.innerText = "Working";
    
    var missing = false;
    
    if (username.value === '') {
        unameReq.style.display = "inherit";
        missing = true;
    }
    else {
        unameReq.style.display = "none";
    }
    
    if (password.value === '') {
        pwordReq.style.display = "inherit";
        missing = true;
    }
    else {
        pwordReq.style.display = "none";
    }
    
    if (missing) {
        return;
    }
    
    var header        = "Basic " + Base64.encode(username.value + ":" + password.value);
    var URL           = "https://api.github.com";
    var xmlRequest    = new XMLHttpRequest();
    
    xmlRequest.open("GET", URL);
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");
    xmlRequest.setRequestHeader("Authorization", header);    
    xmlRequest.onload = function(e) {
        if (xmlRequest.status === 401) {
            // User is unauthorized
            console.log(xmlRequest.status + ": " + xmlRequest.responseText);

            login.innerText = "Invalid";
            setTimeout('login.innerText \= \"Login\";',2000);
        }
        else {
            // User was successfully authed, store credentials
            widget.setPreferenceForKey(header, widget.identifier + "-auth");
            login.innerText = "Login";
            // Display success message
        }
    }
    xmlRequest.send();
}
 
//
// Function: send()
// Sends the contents of your clipboard to gist.github.com to create
// a gist and then puts the public link to said gist in your clipboard.
//
// event: onClick event from the send button
//
function send() {
    statustext.innerText = "Working...";
    
    // Get clipboard data, if any
    var paste = widget.system("/usr/bin/pbpaste", null).outputString;
    if ((typeof paste) === "undefined") {
        statustext.innerText = "Clipboard empty";
        setTimeout('statustext.innerText \= \"\"',4000);
        return;
    }

    // Set filename defaults
    var filename = 'file';
    var ext = ".txt";
    var extPref = "";
    
    if ((typeof (extPref = widget.preferenceForKey(widget.identifier+"-ext"))) !== "undefined") {
        ext = extPref;
    }
        
    var file = filename + ext;
    var files_dict   = {};
    files_dict[file] = { content: paste };
    
    var gist  = {
      description: "",
      public: true,
      files: files_dict
    }
    
    var URL           = "https://api.github.com/gists";
    var onloadHandler = function() { xmlLoaded(xmlRequest); };

    // XMLHttpRequest setup code
    var xmlRequest = new XMLHttpRequest();
    xmlRequest.onload = onloadHandler;
    xmlRequest.open("POST", URL);
    xmlRequest.setRequestHeader("Cache-Control", "no-cache");

    // Check for auth
    if ((auth = widget.preferenceForKey(widget.identifier + "-auth")) !== undefined) {
        xmlRequest.setRequestHeader("Authorization", auth);
    }

    xmlRequest.send(JSON.stringify(gist));
}

// Called when an XMLHttpRequest loads a feed; works with the XMLHttpRequest setup snippet
function xmlLoaded(xmlRequest) 
{
	if (xmlRequest.status == 201 || xmlRequest.status == 200) {
		// Parse and interpret results
		// XML results found in xmlRequest.responseXML
		// Text results found in xmlRequest.responseText
        response = JSON.parse(xmlRequest.responseText);
        widget.system("/bin/echo " + response['html_url'] + " | /usr/bin/pbcopy", null);

        statustext.innerText = "Success";
        setTimeout('statustext.innerText \= \"Link in clipboard\"', 2000);
        setTimeout('statustext.innerText \= \"\"', 6000);
	}
	else {
		alert("Error fetching data (" + xmlRequest.status + "): " + JSON.parse(xmlRequest.responseText)["message"]);
        statustext.innerText = "Failed: " + xmlRequest.status;
	}
}

// Sets the online and offline events at the body element
document.body.addEventListener("online", function () {
	console.log('The widget is online');
    statustext.innerText = "";
    save.object.setEnabled(true);

}, false);
document.body.addEventListener("offline", function () {
	console.log('The widget is offline');
    statustext.innerText = "Error: No internet";
    save.object.setEnabled(false);
}, false);

function setLang(event)
{
    var lang = language.object.getValue();
    if (lang !== '') {
        widget.setPreferenceForKey(lang, widget.identifier + "-ext");
        console.log("Extension changed to " + lang);
    }
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    widget.setPreferenceForKey(undefined, dashcode.createInstancePreferenceKey(widget.identifier + "auth"));
    widget.setPreferenceForKey(undefined, dashcode.createInstancePreferenceKey(widget.identifier + "-ext"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    unameReq.style.display = "none";
    pwordReq.style.display = "none";
    widget.setPreferenceForKey(undefined, widget.identifier + "-ext")
    language.object.setSelectedIndex(0);
    
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}
